// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model EventLog {
  id        String   @id
  timestamp DateTime
  type      String
  data      Json     @default("{}")
  options  Json     @default("{}")

  // Datasets that currently have this event as its last processed event
  jobs ConsumerJob[]

  @@index([timestamp])
}

model FeatureMetadata {
  id      String  @id @default(dbgenerated("nanoid()"))
  feature String  @unique
  name    String?
  color   String?
  isRule  Boolean
  hidden  Boolean @default(false)

  dataType  String  @default("text")
  version   Version @relation(fields: [versionId], references: [id])
  versionId String
}

model Project {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  prodDataset   Dataset? @relation(fields: [prodDatasetId], references: [id])
  prodDatasetId BigInt?  @unique

  releases Release[]
  versions Version[]
  jobs     ConsumerJob[]
}

model Release {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  versionId String
  version   Version @relation(fields: [versionId], references: [id])

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model Version {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?
  code        Json
  version     String
  isDraft     Boolean @default(true)

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  backtests Backtest[]
  releases  Release[]
  features     FeatureMetadata[]
  featureOrder String[]
}

model Dataset {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prodProject Project?
  backtests  Backtest[]
}

model Backtest {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  datasetId BigInt
  dataset  Dataset @relation(fields: [datasetId], references: [id])

  description String?

  backfillFrom DateTime? // If null, backfill from the beginning of time
  backfillTo   DateTime? // If null, backfill to now plus all incoming events

  version   Version @relation(fields: [versionId], references: [id])
  versionId String

  job ConsumerJob?
}

enum ConsumerJobType {
  BACKFILL
  LIVE
}

enum ConsumerJobStatus {
  RUNNING
  COMPLETED
  FAILED
}

model ConsumerJob {
  id        String   @id @default(dbgenerated("nanoid()"))

  lastEventLog   EventLog? @relation(fields: [lastEventLogId], references: [id])
  lastEventLogId String?

  type ConsumerJobType
  status ConsumerJobStatus

  backtestId String? @unique
  backtest Backtest? @relation(fields: [backtestId], references: [id])

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(dbgenerated("nanoid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("nanoid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("nanoid()"))
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
