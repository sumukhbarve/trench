// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model EventLog {
  id        String   @id
  timestamp DateTime
  type      String
  data      Json     @default("{}")

  // Datasets that currently have this event as its last processed event
  datasets Dataset[]

  @@index([timestamp])
}

model EntityType {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String

  featureOrder String[]
  ruleOrder    String[]
  features     EntityFeature[]

  nameFeature   EntityFeature? @relation("NameFeature", fields: [nameFeatureId], references: [id])
  nameFeatureId String?        @unique

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([type, projectId])
}

model EventType {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String

  featureOrder String[]
  ruleOrder    String[]
  features     EventFeature[]

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([type, projectId])
}

model EntityFeature {
  id String @id @default(dbgenerated("nanoid()"))

  entityType   EntityType @relation(fields: [entityTypeId], references: [id])
  entityTypeId String

  feature   Feature @relation(fields: [featureId], references: [id])
  featureId String

  name  String?
  color String?

  nameFeatureEntityType EntityType? @relation("NameFeature")

  // color  String?
  @@unique([entityTypeId, featureId])
}

model EventFeature {
  id String @id @default(dbgenerated("nanoid()"))

  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  eventTypeId String

  feature   Feature @relation(fields: [featureId], references: [id])
  featureId String

  name  String?
  color String?

  // color  String?
  @@unique([eventTypeId, featureId])
}

model Feature {
  id       String  @id @default(dbgenerated("nanoid()"))
  feature  String
  isRule   Boolean
  dataType String  @default("text")
  // name    String?
  // color   String?
  // hidden  Boolean @default(false)

  eventFeatures  EventFeature[]
  entityFeatures EntityFeature[]

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([feature, projectId])
}

model Project {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  prodDataset   Dataset? @relation(fields: [prodDatasetId], references: [id])
  prodDatasetId BigInt?  @unique

  releases Release[]

  features    Feature[]
  eventTypes  EventType[]
  entityTypes EntityType[]
}

model Release {
  id        String   @id @default(dbgenerated("nanoid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?
  code        Json
  version     String
  isDraft     Boolean @default(true)

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  datasets Dataset[]
}

model Dataset {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?

  backfillFrom DateTime? // If null, backfill from the beginning of time
  backfillTo   DateTime? // If null, backfill to now plus all incoming events

  lastEventLog   EventLog? @relation(fields: [lastEventLogId], references: [id])
  lastEventLogId String?

  release   Release @relation(fields: [releaseId], references: [id])
  releaseId String

  prodProject Project?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(dbgenerated("nanoid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("nanoid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("nanoid()"))
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
