# Basic event set up. Read in EventData, and set the current clock time
# [NOTE] Features do not need to be defined in order (Timestamp is set lower down)
LET EventData := input();
LET SqrlClock := jsonValue(EventData, '$.timestamp');

LET User := entity('User', jsonValue(EventData, '$.data.actor.id'));
LET UserName := jsonValue(EventData, '$.data.actor.login');
LET UserAvatarUrl := jsonValue(EventData, '$.data.actor.avatar_url');

LET UserData := getUserData(UserName);

LET UserCreatedDate := jsonValue(UserData, '$.createdDate');
LET UserCreatedYear := jsonValue(UserData, '$.createdYear');
LET UserAchievements := jsonValue(UserData, '$.achievements');
LET UserNumContribsPastYear := jsonValue(UserData, '$.contributionsPastYear');
LET UserSponsors := jsonValue(UserData, '$.sponsors');
LET UserSponsorees := jsonValue(UserData, '$.sponsorees');
LET UserNumRepos := jsonValue(UserData, '$.repositories');
LET UserOrgs := jsonValue(UserData, '$.organizations');
LET UserPinnedRepos := jsonValue(UserData, '$.pinnedRepos');
LET UserBio := jsonValue(UserData, '$.bio');
LET UserReadme := jsonValue(UserData, '$.readmeContent');
LET UserWebsiteUrl := jsonValue(UserData, '$.websiteUrl');
LET UserCompany := jsonValue(UserData, '$.company');
LET UserLocation := jsonValue(UserData, '$.location');
LET UserSocialLinks := jsonValue(UserData, '$.socialLinks');


LET Org := entity('Org', jsonValue(EventData, '$.data.org.id'));
LET OrgName := jsonValue(EventData, '$.data.org.login');
LET OrgAvatarUrl := jsonValue(EventData, '$.data.org.avatar_url');

LET Repo := entity('Repo', jsonValue(EventData, '$.data.repo.id'));
LET RepoName := jsonValue(EventData, '$.data.repo.name');


LET BioSimhash := simhash(UserBio);
LET ReadmeSimhash := simhash(UserReadme);
LET ReposSimhash := simhash(UserPinnedRepos);
LET CreatedDateSimhash := if(UserCreatedDate, simhash(UserCreatedDate));

# Good features
CREATE RULE UserHasGithubPro WHERE jsonValue(UserData, '$.isPro');
CREATE RULE UserHasOldAccount WHERE jsonValue(UserData, '$.createdYear') < 2020;
CREATE RULE UserHasManyAchievements WHERE length(jsonValue(UserData, '$.achievements')) >= 3;
CREATE RULE UserHasSponsors WHERE length(jsonValue(UserData, '$.sponsors')) > 0;
CREATE RULE UserHasSponsorees WHERE jsonValue(UserData, '$.sponsoring') > 0;
CREATE RULE UserHasManyContribsPastYear WHERE UserNumContribsPastYear >= 100;

LET UserNumReposStarred := countUnique(Repo BY User);

LET RepoNumStargazers := countUnique(User BY Repo);
LET RepoNumBadStargazers := countUnique(User BY Repo WHERE IsBadUser);

CREATE RULE IsGoodUser WHERE UserHasGithubPro OR UserHasOldAccount OR UserHasManyAchievements OR UserHasSponsors OR UserHasSponsorees OR UserHasManyContribsPastYear;

# Bad labels
LET DaysSinceUserCreated := if(UserCreatedDate, dateDiff('DAY', date(UserCreatedDate)));
CREATE RULE NewAccount WHERE DaysSinceUserCreated < 60;

LET UserNumProfileFields := length(filter([
  UserNumRepos,
  length(UserAchievements),
  length(UserOrgs),
  UserReadme,
  UserWebsiteUrl,
  UserBio,
  UserCompany,
  UserLocation,
  length(UserSocialLinks),
]));

# Bad features
CREATE RULE UserHasEmptyProfile WHERE UserNumProfileFields = 0;
CREATE RULE UserHasMostlyEmptyProfile WHERE NOT UserHasEmptyProfile AND UserNumProfileFields <= 2 AND UserNumContribsPastYear < 10;
CREATE RULE ManyUsersWithSameBioPastWeek WHERE length(split(UserBio, ' ')) >= 3 AND countUnique(User By BioSimhash LAST WEEK) > 5;
CREATE RULE ManyUsersWithSameReadmePastWeek WHERE length(split(UserReadme, ' ') >= 4) AND countUnique(User By ReadmeSimhash LAST WEEK) > 5;
CREATE RULE ManyUsersWithSameReposPastWeek WHERE length(UserPinnedRepos) > 0 AND countUnique(User By ReposSimhash LAST WEEK) > 5;
CREATE RULE ManyUsersWithSameCreatedDatePastWeek WHERE UserCreatedDate AND countUnique(User By CreatedDateSimhash LAST WEEK) > 5;

CREATE RULE IsBadUser WHERE NOT IsGoodUser AND (NewAccount OR UserHasEmptyProfile OR UserHasMostlyEmptyProfile OR ManyUsersWithSameBioPastWeek OR ManyUsersWithSameCreatedDatePastWeek
  OR ManyUsersWithSameReadmePastWeek OR ManyUsersWithSameReposPastWeek);

LET NumUsersByRepo := countUnique(User BY Repo LAST WEEK);
LET NumBadUsersByRepo := countUnique(User BY Repo WHERE IsBadUser LAST WEEK);

CREATE RULE RepoHasManyBadUsersPastWeek WHERE NumBadUsersByRepo > 10 AND NumBadUsersByRepo / NumUsersByRepo > 0.8;


