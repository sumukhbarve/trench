diff --git a/lib/CountFunctions.js b/lib/CountFunctions.js
index 2b17989b28b588160425791be1a2149e1e2c62af..f14aefd77162f0c91af4c71da2b3d3b9d5b39382 100644
--- a/lib/CountFunctions.js
+++ b/lib/CountFunctions.js
@@ -150,7 +150,7 @@ function registerCountFunctions(instance, service) {
     }, {
         allowNull: true,
         allowSqrlObjects: true,
-        args: [sqrl_1.AT.state, sqrl_1.AT.any.array, sqrl_1.AT.any, sqrl_1.AT.any],
+        args: [sqrl_1.AT.state, sqrl_1.AT.any, sqrl_1.AT.any, sqrl_1.AT.any],
     });
     instance.register(function _fetchCountsFromDb(state, keys, windowMs) {
         if (keys === null) {
diff --git a/lib/CountUniqueFunctions.js b/lib/CountUniqueFunctions.js
index 8ca14888115ec35d7b184b7572f5ce917a284645..c3538b399a513a5665c21a74c172b8ff6d178e79 100644
--- a/lib/CountUniqueFunctions.js
+++ b/lib/CountUniqueFunctions.js
@@ -31,7 +31,7 @@ const tupleToString = (tuple) => stringify(tuple.map(sqrl_1.SqrlObject.ensureBas
 function registerCountUniqueFunctions(instance, service) {
     instance.registerStatement("SqrlCountUniqueStatements", async function _bumpCountUnique(state, keys, uniques, windowMs) {
         uniques = sqrl_1.SqrlObject.ensureBasic(uniques);
-        if (!keys.length || !isCountable(uniques)) {
+        if (!keys || !keys.length || !isCountable(uniques)) {
             return;
         }
         for (const features of (0, sqrl_common_1.sqrlCartesianProduct)(uniques)) {
@@ -52,7 +52,7 @@ function registerCountUniqueFunctions(instance, service) {
     }, {
         allowNull: true,
         allowSqrlObjects: true,
-        args: [sqrl_1.AT.state, sqrl_1.AT.any.array, sqrl_1.AT.any.array, sqrl_1.AT.any],
+        args: [sqrl_1.AT.state, sqrl_1.AT.any, sqrl_1.AT.any.array, sqrl_1.AT.any],
     });
     instance.registerSync(function _unionCountUnique(left, right) {
         (0, sqrl_common_1.invariant)(left instanceof Set && right instanceof Set, "expected left and right to be Sets");
diff --git a/lib/EntityFunctions.js b/lib/EntityFunctions.js
index 0060dcd2e7c3bd217af67f97324d7e37a3094bb1..87e5d311bc203950fa4db2926611ff7f59a94b96 100644
--- a/lib/EntityFunctions.js
+++ b/lib/EntityFunctions.js
@@ -10,7 +10,9 @@ async function toEntity(service, state, type, value, options = {}) {
         value = value.toString();
     }
     const uniqueId = await service.fetch(state.ctx, type, value);
-    return new sqrl_1.SqrlEntity(new sqrl_1.SqrlUniqueId(uniqueId), type, value);
+    const entity = new sqrl_1.SqrlEntity(new sqrl_1.SqrlUniqueId(uniqueId), type, value);
+    state.manipulator.trackEntity(entity);
+    return entity;
 }
 function registerEntityFunctions(instance, service) {
     instance.register(async function _entity(state, type, value) {
